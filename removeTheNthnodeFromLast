/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head == null ){
            return head;
        }
      // the logic is simple just move the fast pointer n times forward then move slow after that while fast.next != null so the slow pointer lands just before the element that needs to be removed so just rearrange and ur done 
        ListNode fast = head;
        ListNode slow = head;
        for(int i =1;i<=n;i++){
            System.out.println("in the loop");
            fast = fast.next;
            System.out.println(fast + "fast val");
        }
        if(fast == null){
            System.out.println("in the secondloop");
            return head.next;
        }
        while(fast.next != null){
            slow = slow.next;
            fast = fast.next;
        }
        slow.next  = slow.next.next;
        return head;
    }
}
