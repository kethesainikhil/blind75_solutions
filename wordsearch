use backtracking do this traversal and find appropriate ans

class Solution {
    public boolean exist(char[][] board, String word) {
        boolean [][] board2 = new boolean[board.length][board[0].length];
        for(int i =0;i<board.length;i++){
            for(int j =0;j<board[0].length;j++){
                if(board[i][j] == word.charAt(0)){
                    if(helper(board,word.substring(1),board2,i,j)){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    static boolean helper(char[][] board,String word,boolean[][] board2,int i,int j){
        if(word.isEmpty()){
            return true;
        }
        if(board2[i][j] == true){
            return false;
        }
        board2[i][j] = true;
        boolean top = false;
        boolean bottom = false;
        boolean right = false;
        boolean left = false;
        //top 
        if(i > 0){
            if(word.charAt(0) == board[i-1][j] && board2[i-1][j] != true){
                top = helper(board,word.substring(1),board2,i-1,j);
            }
        }
        //bottom traversal
        if(i < board.length-1){
            if(word.charAt(0) == board[i+1][j] && board2[i+1][j] != true){
                bottom = helper(board,word.substring(1),board2,i+1,j);
            }
        }
        //left traversal
        if(j > 0){
            if(word.charAt(0) == board[i][j-1] && board2[i][j-1] != true){
                left = helper(board,word.substring(1),board2,i,j-1);
            }
        }
        //right traversal
        if(j < board[0].length-1){
            if(word.charAt(0) == board[i][j+1] && board2[i][j+1] != true){
                right = helper(board,word.substring(1),board2,i,j+1);
            }
        }
        board2[i][j] = false;
        if(top || left || bottom || right){
            return true;
        }
        return false;
    }
}
