https://leetcode.com/problems/3sum/
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.



class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
         Set<List<Integer>> list =new HashSet<>();
         Arrays.sort(nums);
        for(int i =0;i<nums.length;i++){
            
            HashMap<Integer,Integer> map = new HashMap<>();
            
            for(int j = i+1;j<nums.length;j++){ 
                List<Integer> li = new ArrayList<>(); 
                if(map.get(-(nums[i] + nums[j])) != null){ 
                    li.add(nums[i]);
                    li.add(nums[j]);
                    li.add(nums[map.get(-(nums[i] + nums[j]))]);
                    map.put(nums[j],j);
                    list.add(li);
                }
                map.put(nums[j],j);
            }
           
        }   
        return new ArrayList<>(list);
    }
}





optimal solution
use binary search method by fixing one element 

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(nums);
        for(int i =0;i<nums.length-2;i++){
            if(i>0 && nums[i]==nums[i-1]) continue;
            int j = i+1;
            int k = nums.length-1;
            while(j < k){
                int sum = nums[i] + nums[j] + nums[k];
                if(sum < 0){
                    j++;
                }
                else if(sum > 0){
                    k--;
                }
                else{
                    list.add(Arrays.asList(nums[i],nums[j],nums[k]));
                    j++;
                    k--; 
                    while(j<k && nums[j] == nums[j-1] ){
                    j++;
                    }
                    while(j<k && nums[k] == nums[k+1] ){
                    k--;
                    } 
                }
                
            }
        }
        return list;
    }
}
